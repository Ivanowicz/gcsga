import { SYSTEM_NAME } from "@module/settings";
import { ModifierApp } from "./app";

export class ModifierAppWindow extends Application {
	constructor(button: ModifierApp, options = {}) {
		super(options);

		this.button = button;
	}

	static get defaultOptions(): ApplicationOptions {
		return mergeObject(super.defaultOptions, {
			id: "ModifierAppWindow",
			template: `systems/${SYSTEM_NAME}/templates/modifier-app/window.hbs`,
			popOut: false,
			minimizable: false,
			classes: ["modifier-app-window"],
		})
	}

	render(force?: boolean | undefined, options?: Application.RenderOptions<ApplicationOptions> | undefined): unknown {
		this.button.showing = true;
		return super.render(force, options);
	}

	close(options?: Application.CloseOptions | undefined): Promise<void> {
		this.button.showing = false;
		return super.close(options);
	}

	activateListeners(html: JQuery<HTMLElement>): void {
		super.activateListeners(html);

		// Get position
		const button = $("#modifier-app");
		const buttonTop = button.offset()?.top ?? 0; // might use position() depending on as yet unencountered issues
		const buttonLeft = button.offset()?.left ?? 0;
		let buttonWidth = parseFloat(button.css("width").replace("px", ""));
		let width = parseFloat(html.css("width").replace("px", ""));
		let height = parseFloat(html.css("height").replace("px", ""));

		console.log(`buttonLeft: ${buttonLeft}\nbuttonTop: ${buttonTop} \nbuttonWidth: ${buttonWidth}\nwidth: ${width}\nheight: ${height}`);
		let left = Math.max(buttonLeft + buttonWidth / 2 - width / 2, 10);
		html.css("left", `${left}px`);
		html.css("top", `${buttonTop - height - 10}px`);
	}
}

export interface ModifierAppWindow extends Application {
	button: ModifierApp;
}
